---
import { getLanguageSwitchUrl, getLanguageDisplayName } from '@/utils';
import type { Language } from '@/types';

interface Props {
  currentLang: Language;
  currentUrl: string;
}

const { currentLang, currentUrl } = Astro.props;
const otherLang: Language = currentLang === 'zh' ? 'en' : 'zh';
const switchUrl = getLanguageSwitchUrl(currentUrl, otherLang);
---

<div class="relative">
  <button 
    id="language-toggle"
    class="flex items-center space-x-2 px-3 py-2 rounded-lg border border-gray-300 hover:border-aws-orange hover:bg-orange-50 transition-all duration-200 text-sm font-medium"
    aria-label="Switch language"
  >
    <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
    </svg>
    <span class="text-gray-700">{getLanguageDisplayName(currentLang)}</span>
    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <!-- Dropdown Menu -->
  <div 
    id="language-dropdown" 
    class="absolute right-0 mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 hidden z-10"
  >
    <div class="py-1">
      <a 
        href={switchUrl}
        class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200"
      >
        <span class="mr-2">
          {otherLang === 'zh' ? 'ðŸ‡¨ðŸ‡³' : 'ðŸ‡ºðŸ‡¸'}
        </span>
        {getLanguageDisplayName(otherLang)}
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('language-toggle');
    const dropdown = document.getElementById('language-dropdown');
    
    if (toggleButton && dropdown) {
      // Toggle dropdown on button click
      toggleButton.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdown.classList.toggle('hidden');
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', () => {
        dropdown.classList.add('hidden');
      });
      
      // Prevent dropdown from closing when clicking inside it
      dropdown.addEventListener('click', (e) => {
        e.stopPropagation();
      });
    }
  });
</script>