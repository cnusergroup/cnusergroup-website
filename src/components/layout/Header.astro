---
import { getLanguageFromUrl, getLanguageSwitchUrl, t } from '@/utils';
import LanguageToggle from './LanguageToggle.astro';

const currentUrl = Astro.url.pathname;
const lang = getLanguageFromUrl(Astro.url);
---

<header class="sticky top-0 z-50 bg-white/95 backdrop-blur-md shadow-lg border-b border-gray-100">
  <div class="container-custom">
    <div class="flex items-center justify-between h-20">
      <!-- Logo and Brand -->
      <div class="flex items-center space-x-4">
        <a 
          href={lang === 'zh' ? '/' : '/en'} 
          class="flex items-center space-x-3 group"
          aria-label={lang === 'zh' ? '返回首页' : 'Go to homepage'}
        >
          <div class="relative w-12 h-12 bg-gradient-to-br from-orange-400 to-orange-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-105" aria-hidden="true">
            <span class="text-white font-bold text-xl">UG</span>
            <div class="absolute inset-0 bg-gradient-to-br from-orange-300 to-orange-500 rounded-xl opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>
          </div>
          <div class="hidden sm:block">
            <h1 class="text-2xl font-bold bg-gradient-to-r from-aws-blue to-blue-600 bg-clip-text text-transparent">
              {t('site.title', lang)}
            </h1>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav 
        id="navigation" 
        class="hidden md:flex items-center space-x-2"
        role="navigation"
        aria-label={lang === 'zh' ? '主导航' : 'Main navigation'}
      >
        <a 
          href={lang === 'zh' ? '/' : '/en'} 
          class="nav-link"
          data-text={t('navigation.home', lang)}
        >
          <span class="nav-link-text">{t('navigation.home', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
        <a 
          href={lang === 'zh' ? '/cities' : '/en/cities'} 
          class="nav-link"
          data-text={t('navigation.cities', lang)}
        >
          <span class="nav-link-text">{t('navigation.cities', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
        <a 
          href={lang === 'zh' ? '/events' : '/en/events'} 
          class="nav-link"
          data-text={t('navigation.events', lang)}
        >
          <span class="nav-link-text">{t('navigation.events', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
        <a 
          href={lang === 'zh' ? '/about' : '/en/about'} 
          class="nav-link"
          data-text={t('navigation.about', lang)}
        >
          <span class="nav-link-text">{t('navigation.about', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
      </nav>

      <!-- Language Toggle and Mobile Menu -->
      <div class="flex items-center space-x-4">
        <LanguageToggle currentLang={lang} currentUrl={currentUrl} />
        
        <!-- Mobile Menu Button -->
        <button 
          id="mobile-menu-button"
          class="md:hidden p-3 rounded-xl text-gray-700 hover:bg-gradient-to-br hover:from-orange-50 hover:to-orange-100 hover:text-orange-600 transition-all duration-300 hover:shadow-lg hover:scale-105"
          aria-label="Toggle mobile menu"
        >
          <svg class="w-6 h-6 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div id="mobile-menu" class="md:hidden hidden border-t border-gray-100 py-4">
      <nav class="flex flex-col space-y-2 px-4">
        <a 
          href={lang === 'zh' ? '/' : '/en'} 
          class="nav-link mobile-nav-link"
          data-text={t('navigation.home', lang)}
        >
          <span class="nav-link-text">{t('navigation.home', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
        <a 
          href={lang === 'zh' ? '/cities' : '/en/cities'} 
          class="nav-link mobile-nav-link"
          data-text={t('navigation.cities', lang)}
        >
          <span class="nav-link-text">{t('navigation.cities', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
        <a 
          href={lang === 'zh' ? '/events' : '/en/events'} 
          class="nav-link mobile-nav-link"
          data-text={t('navigation.events', lang)}
        >
          <span class="nav-link-text">{t('navigation.events', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
        <a 
          href={lang === 'zh' ? '/about' : '/en/about'} 
          class="nav-link mobile-nav-link"
          data-text={t('navigation.about', lang)}
        >
          <span class="nav-link-text">{t('navigation.about', lang)}</span>
          <div class="nav-link-bg"></div>
        </a>
      </nav>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        const isOpen = !mobileMenu.classList.contains('hidden');
        
        if (isOpen) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.classList.remove('menu-open');
        } else {
          mobileMenu.classList.remove('hidden');
          mobileMenuButton.classList.add('menu-open');
        }
      });
      
      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!mobileMenuButton.contains(e.target as Node) && !mobileMenu.contains(e.target as Node)) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.classList.remove('menu-open');
        }
      });
    }

    // Add active state to current page navigation
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (currentPath === href || (href !== '/' && href !== '/en' && currentPath.startsWith(href)))) {
        link.classList.add('active');
      }
    });
  });
</script>

<style>
  /* Modern Navigation Styles */
  .nav-link {
    position: relative;
    display: inline-flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    font-size: 0.95rem;
    color: #374151;
    text-decoration: none;
    border-radius: 0.75rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    z-index: 1;
  }

  .nav-link-text {
    position: relative;
    z-index: 2;
    transition: color 0.3s ease;
  }

  .nav-link-bg {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #ff9500 0%, #e67e22 100%);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 0.75rem;
    z-index: 1;
  }

  .nav-link:hover .nav-link-bg,
  .nav-link.active .nav-link-bg {
    transform: scaleX(1);
  }

  .nav-link:hover .nav-link-text,
  .nav-link.active .nav-link-text {
    color: white;
  }

  .nav-link:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(255, 149, 0, 0.2);
  }

  .nav-link.active {
    transform: translateY(-1px);
    box-shadow: 0 8px 20px rgba(255, 149, 0, 0.25);
  }

  /* Glowing effect on hover */
  .nav-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #ff9500 0%, #e67e22 100%);
    border-radius: 0.75rem;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 0;
  }

  .nav-link:hover::before {
    opacity: 0.1;
  }

  /* Mobile menu enhancements */
  #mobile-menu {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 0 0 1rem 1rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .mobile-nav-link {
    width: 100%;
    justify-content: flex-start;
    margin: 0.25rem 0;
    padding: 0.75rem 1rem;
  }

  .mobile-nav-link:hover {
    transform: translateX(4px);
    box-shadow: 0 4px 15px rgba(255, 149, 0, 0.15);
  }

  /* Header backdrop blur support */
  @supports (backdrop-filter: blur(10px)) {
    header {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
    }
  }

  /* Mobile menu button animations */
  #mobile-menu-button.menu-open svg {
    transform: rotate(90deg);
  }

  #mobile-menu-button:active {
    transform: scale(0.95);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .nav-link {
      padding: 0.5rem 1rem;
      font-size: 0.9rem;
    }
    
    header {
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }
  }
</style>