---
/**
 * Events List Component
 * Displays a list of events with filtering and pagination
 */

import type { ProcessedEvent } from '../../utils/eventProcessing.js';
import EventCard from '../ui/EventCard.astro';

export interface Props {
  events: ProcessedEvent[];
  locale?: 'zh' | 'en';
  showEngagement?: boolean;
  showFilters?: boolean;
  showPagination?: boolean;
  eventsPerPage?: number;
  currentPage?: number;
  totalEvents?: number;
  totalPages?: number;
  allEvents?: ProcessedEvent[]; // For statistics calculation
  title?: string;
  description?: string;
  className?: string;
}

const {
  events = [],
  locale = 'zh',
  showEngagement = true,
  showFilters = true,
  showPagination = true,
  eventsPerPage = 12,
  currentPage = 1,
  totalEvents,
  totalPages,
  allEvents,
  title,
  description,
  className = ''
} = Astro.props;

// Use provided pagination data
const actualTotalEvents = totalEvents ?? events.length;
const actualTotalPages = totalPages ?? Math.ceil(actualTotalEvents / eventsPerPage);
const startIndex = (currentPage - 1) * eventsPerPage;
const endIndex = Math.min(startIndex + eventsPerPage, actualTotalEvents);
const paginatedEvents = events;

// Tags are no longer used for filtering

// For statistics, we need to use all events, not just paginated ones
const allEventsForStats = allEvents || events;
const upcomingEvents = allEventsForStats.filter(event => event.status === 'upcoming');
const pastEvents = allEventsForStats.filter(event => event.status === 'ended');

// Get unique cities for filtering (only show cities with events)
const cityCounts = allEventsForStats.reduce((acc, event) => {
  event.cityMappings.forEach(cityId => {
    acc[cityId] = (acc[cityId] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// City name mappings based on locale
const cityNames: Record<string, Record<string, string>> = {
  zh: {
    'beijing': '北京',
    'shanghai': '上海', 
    'shenzhen': '深圳',
    'guangzhou': '广州',
    'chengdu': '成都',
    'hangzhou': '杭州',
    'wuhan': '武汉',
    'xian': '西安',
    'hefei': '合肥',
    'fuzhou': '福州',
    'suzhou': '苏州',
    'lanzhou': '兰州',
    'changji': '昌吉',
    'hechi': '河池',
    'urumqi': '乌鲁木齐',
    'qingdao': '青岛',
    'xiamen': '厦门',
    'zhangjiakou': '张家口'
  },
  en: {
    'beijing': 'Beijing',
    'shanghai': 'Shanghai', 
    'shenzhen': 'Shenzhen',
    'guangzhou': 'Guangzhou',
    'chengdu': 'Chengdu',
    'hangzhou': 'Hangzhou',
    'wuhan': 'Wuhan',
    'xian': 'Xi\'an',
    'hefei': 'Hefei',
    'fuzhou': 'Fuzhou',
    'suzhou': 'Suzhou',
    'lanzhou': 'Lanzhou',
    'changji': 'Changji',
    'hechi': 'Hechi',
    'urumqi': 'Urumqi',
    'qingdao': 'Qingdao',
    'xiamen': 'Xiamen',
    'zhangjiakou': 'Zhangjiakou'
  }
};

const allCities = Object.entries(cityCounts)
  .filter(([, count]) => count > 0)
  .sort(([, a], [, b]) => b - a)
  .map(([cityId]) => ({ 
    id: cityId, 
    name: cityNames[locale]?.[cityId] || cityId 
  }));

// Load translations
const translationsModule = locale === 'zh' 
  ? await import('../../data/translations/zh.json')
  : await import('../../data/translations/en.json');
const translations = translationsModule.default;
const t = translations.events;

// Format pagination text
function formatPaginationText(start: number, end: number, total: number): string {
  return t.showingResults
    .replace('{start}', start.toString())
    .replace('{end}', Math.min(end, total).toString())
    .replace('{total}', total.toString());
}

// Generate pagination URL with preserved query parameters
function generatePaginationUrl(pageNum: number): string {
  const url = new URL(Astro.request.url);
  const params = new URLSearchParams(url.search);
  
  if (pageNum === 1) {
    params.delete('page');
  } else {
    params.set('page', pageNum.toString());
  }
  
  const queryString = params.toString();
  // Use import.meta.env.BASE_URL to get the correct base path
  const basePath = import.meta.env.BASE_URL || '/';
  const eventsPath = basePath === '/' ? '/events' : `${basePath.replace(/\/$/, '')}/events`;
  return `${eventsPath}${queryString ? '?' + queryString : ''}`;
}
---

<div class={`events-list ${className}`}>
  <!-- Header -->
  {(title || description) && (
    <div class="mb-8">
      {title && (
        <h2 class="text-3xl font-bold text-gray-900 mb-4">{title}</h2>
      )}
      {description && (
        <p class="text-lg text-gray-600">{description}</p>
      )}
    </div>
  )}

  <!-- Statistics -->
  {actualTotalEvents > 0 && (
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
      <div class="bg-blue-50 rounded-lg p-4">
        <div class="text-2xl font-bold text-blue-600">{actualTotalEvents}</div>
        <div class="text-sm text-blue-800">{t.allEvents}</div>
      </div>
      <div class="bg-green-50 rounded-lg p-4">
        <div class="text-2xl font-bold text-green-600">{upcomingEvents.length}</div>
        <div class="text-sm text-green-800">{t.upcomingEvents}</div>
      </div>
      <div class="bg-gray-50 rounded-lg p-4">
        <div class="text-2xl font-bold text-gray-600">{pastEvents.length}</div>
        <div class="text-sm text-gray-800">{t.pastEvents}</div>
      </div>
    </div>
  )}

  <!-- Search and Filters (Integrated) -->
  {showFilters && actualTotalEvents > 0 && (
    <div class="mb-8 p-6 bg-gray-50 rounded-lg">
      <!-- Search Input -->
      <div class="mb-4">
        <div class="relative">
          <input
            type="text"
            id="event-search"
            placeholder={t.searchPlaceholder}
            class="w-full px-4 py-3 pl-12 pr-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Filter Options -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Event Status Filter -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            {t.filters.status}
          </label>
          <select 
            id="statusFilter" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">{t.allEvents}</option>
            <option value="upcoming">{t.upcomingEvents}</option>
            <option value="past">{t.pastEvents}</option>
          </select>
        </div>

        <!-- City Filter -->
        {allCities.length > 0 && (
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              {t.filters.city}
            </label>
            <select 
              id="cityFilter" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">{t.filters.allCities}</option>
              {allCities.map(city => (
                <option value={city.id}>{city.name}</option>
              ))}
            </select>
          </div>
        )}
      </div>
      
      <!-- Results Summary and Clear Button -->
      <div class="mt-4 flex items-center justify-between text-sm text-gray-600">
        <span id="results-count">
          {locale === 'zh' ? '显示所有活动' : 'Showing all events'}
        </span>
        <button
          id="clear-filters"
          class="text-blue-600 hover:text-blue-800 transition-colors duration-200 hidden"
        >
          {locale === 'zh' ? '清除筛选' : 'Clear Filters'}
        </button>
      </div>
    </div>
  )}

  <!-- Search Results Summary -->
  <div class="mb-4 flex items-center justify-between">
    <div id="searchResultsCount" class="text-sm text-gray-600">
      {showPagination && actualTotalEvents > eventsPerPage 
        ? formatPaginationText(startIndex + 1, endIndex, actualTotalEvents)
        : `${locale === 'zh' ? '显示' : 'Showing'} ${actualTotalEvents} ${locale === 'zh' ? '个活动' : 'events'}`
      }
    </div>
    <button
      type="button"
      id="clearAllFilters"
      class="text-blue-600 hover:text-blue-800 text-sm font-medium hidden"
    >
      {locale === 'zh' ? '清除所有筛选' : 'Clear All Filters'}
    </button>
  </div>

  <!-- Events Grid -->
  {paginatedEvents.length > 0 ? (
    <div>

      <!-- Events Grid -->
      <div class="mb-8" id="events-grid">
        {paginatedEvents.map((event, index) => (
          <EventCard 
            event={event} 
            locale={locale} 
            showEngagement={showEngagement}
            className={index >= 6 ? 'lazy-load' : ''}
          />
        ))}
      </div>

      <!-- Pagination -->
      {showPagination && actualTotalPages > 1 && (
        <div class="flex items-center justify-between">
          <div class="flex-1 flex justify-between sm:hidden">
            <!-- Mobile pagination -->
            {currentPage > 1 && (
              <a
                href={generatePaginationUrl(currentPage - 1)}
                class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                {t.previousPage}
              </a>
            )}
            {currentPage < actualTotalPages && (
              <a
                href={generatePaginationUrl(currentPage + 1)}
                class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                {t.nextPage}
              </a>
            )}
          </div>
          
          <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p class="text-sm text-gray-700">
                {formatPaginationText(
                  startIndex + 1, 
                  endIndex, 
                  actualTotalEvents
                )}
              </p>
            </div>
            <div>
              <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <!-- Previous button -->
                {currentPage > 1 ? (
                  <a
                    href={generatePaginationUrl(currentPage - 1)}
                    class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    <span class="sr-only">{t.previousPage}</span>
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </a>
                ) : (
                  <span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </span>
                )}

                <!-- Page numbers -->
                {Array.from({ length: Math.min(actualTotalPages, 5) }, (_, i) => {
                  const startPage = Math.max(1, currentPage - 2);
                  const pageNum = startPage + i;
                  
                  if (pageNum > actualTotalPages) return null;
                  
                  const isCurrentPage = pageNum === currentPage;
                  
                  return (
                    <a
                      href={generatePaginationUrl(pageNum)}
                      class={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                        isCurrentPage
                          ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                          : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      {pageNum}
                    </a>
                  );
                }).filter(Boolean)}

                <!-- Next button -->
                {currentPage < actualTotalPages ? (
                  <a
                    href={generatePaginationUrl(currentPage + 1)}
                    class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    <span class="sr-only">{t.nextPage}</span>
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                  </a>
                ) : (
                  <span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                  </span>
                )}
              </nav>
            </div>
          </div>
        </div>
      )}
    </div>
  ) : (
    <!-- No Events Message -->
    <div class="text-center py-12">
      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900">{t.noEvents}</h3>
      <p class="mt-1 text-sm text-gray-500">{t.noEventsDesc}</p>
    </div>
  )}
</div>

<script define:vars={{ allEvents, eventsPerPage, showingResultsTemplate: t.showingResults, translations: t }}>
  // Client-side pagination and filtering for static sites
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('event-search');
    const statusFilter = document.getElementById('statusFilter');
    const cityFilter = document.getElementById('cityFilter');
    const clearSearchBtn = document.getElementById('clear-filters');
    const clearAllFiltersBtn = document.getElementById('clearAllFilters');
    const searchResultsCount = document.getElementById('searchResultsCount');
    
    // Get all events data from component props
    const allEventsData = allEvents || [];
    const itemsPerPage = eventsPerPage || 12;
    
    // Initialize client-side pagination
    function initializeClientPagination() {
      // Get current page from URL
      const urlParams = new URLSearchParams(window.location.search);
      const currentPage = parseInt(urlParams.get('page') || '1');
      
      // Apply current filters
      let filteredEvents = [...allEventsData];
      
      // Status filter
      const status = statusFilter?.value || 'all';
      if (status !== 'all') {
        filteredEvents = filteredEvents.filter(event => {
          if (status === 'upcoming') return event.status === 'upcoming';
          if (status === 'past') return event.status === 'ended';
          return true;
        });
      }
      
      // City filter
      const cityId = cityFilter?.value || '';
      if (cityId) {
        filteredEvents = filteredEvents.filter(event => 
          event.cityMappings && event.cityMappings.includes(cityId)
        );
      }
      
      // Search filter
      const searchQuery = searchInput?.value?.toLowerCase().trim() || '';
      if (searchQuery) {
        const searchTerms = searchQuery.split(/\s+/).filter(term => term.length > 0);
        filteredEvents = filteredEvents.filter(event => {
          // Create comprehensive search text
          const searchFields = [
            event.title || '',
            event.location || '',
            (event.tags || []).join(' '),
            (event.cityMappings || []).join(' '),
            event.time || '',
            event.formattedDate || ''
          ];
          
          const searchText = searchFields.join(' ').toLowerCase();
          
          // Support multiple search terms (AND logic)
          return searchTerms.every(term => searchText.includes(term));
        });
      }
      
      // Calculate pagination
      const totalEvents = filteredEvents.length;
      const totalPages = Math.ceil(totalEvents / itemsPerPage);
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, totalEvents);
      const paginatedEvents = filteredEvents.slice(startIndex, endIndex);
      
      // Update events grid
      updateEventsGrid(paginatedEvents);
      
      // Update search results count
      const isFiltered = searchInput?.value?.trim() || statusFilter?.value !== 'all' || cityFilter?.value;
      updateSearchResultsCount(startIndex + 1, endIndex, totalEvents, isFiltered);
      
      // Update clear buttons
      updateClearButtons();
      
      // Update pagination controls
      updatePaginationControls(currentPage, totalPages);
    }
    
    // Update events grid with new events
    function updateEventsGrid(events) {
      const eventsGrid = document.getElementById('events-grid');
      if (!eventsGrid) return;
      
      eventsGrid.innerHTML = '';
      
      events.forEach((event, index) => {
        const eventCard = createEventCard(event, index);
        eventsGrid.appendChild(eventCard);
      });
      
      // Re-initialize lazy loading
      const lazyLoadCards = eventsGrid.querySelectorAll('.lazy-load');
      if (lazyLoadCards.length > 0) {
        const imageObserver = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const card = entry.target;
              card.classList.remove('lazy-load');
              observer.unobserve(card);
            }
          });
        });
        
        lazyLoadCards.forEach(card => imageObserver.observe(card));
      }
    }
    
    // Create event card HTML
    function createEventCard(event, index) {
      const card = document.createElement('div');
      card.className = index >= 6 ? 'lazy-load' : '';
      card.setAttribute('data-event-id', event.id);
      card.setAttribute('data-event-title', event.title);
      card.setAttribute('data-event-location', event.location);
      card.setAttribute('data-event-status', event.status);
      card.setAttribute('data-event-cities', (event.cityMappings || []).join(','));
      
      card.innerHTML = `
        <div class="group relative bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200 border border-gray-200 hover:border-gray-300 flex flex-col h-full">
          <!-- Event Image -->
          <div class="relative aspect-video overflow-hidden rounded-t-lg">
            <img src="${event.imageUrl || event.localImage || '/images/placeholder-event.jpg'}" alt="${event.title}" class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200" loading="lazy">
            
            <!-- Event Status Badge -->
            <div class="absolute top-3 left-3">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${event.status === 'upcoming' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-600'}">
                ${event.status === 'upcoming' ? translations.status.upcoming : translations.status.past}
              </span>
            </div>
            
            <!-- Engagement Metrics -->
            ${event.views > 0 || event.favorites > 0 ? `
            <div class="absolute top-3 right-3 flex space-x-2">
              ${event.views > 0 ? `
              <div class="bg-black bg-opacity-60 text-white px-2 py-1 rounded text-xs flex items-center space-x-1">
                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
                <span>${(event.views || 0) >= 1000 ? ((event.views || 0) / 1000).toFixed(1) + 'k' : (event.views || 0)}</span>
              </div>
              ` : ''}
              ${event.favorites > 0 ? `
              <div class="bg-black bg-opacity-60 text-white px-2 py-1 rounded text-xs flex items-center space-x-1">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path>
                </svg>
                <span>${event.favorites >= 1000 ? (event.favorites / 1000).toFixed(1) + 'k' : event.favorites}</span>
              </div>
              ` : ''}
            </div>
            ` : ''}
          </div>
          
          <!-- Event Content -->
          <div class="p-4 flex flex-col flex-grow">
            <!-- Event Title -->
            <h3 class="font-semibold text-gray-900 text-lg mb-2 line-clamp-2 group-hover:text-blue-600 transition-colors">
              ${event.title}
            </h3>
            
            <!-- Event Details -->
            <div class="space-y-2 mb-4 flex-grow">
              <!-- Date and Time -->
              <div class="flex items-center text-sm text-gray-600">
                <svg class="w-4 h-4 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <span>${event.formattedDate || event.time}</span>
              </div>
              
              <!-- Location -->
              <div class="flex items-center text-sm text-gray-600">
                <svg class="w-4 h-4 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                <span>${event.location}</span>
              </div>
            </div>
            
            <!-- Action Button - Always at bottom -->
            <div class="mt-auto">
              <div class="flex items-center justify-between">
                <a
                  href="${event.url}"
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                >
                  ${translations.viewDetails}
                  <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                </a>
                
                <!-- Additional Engagement Info -->
                ${event.views > 0 || event.favorites > 0 ? `
                <div class="text-xs text-gray-500 flex items-center space-x-3">
                  ${event.views > 0 ? `
                  <span class="flex items-center">
                    <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                    ${(event.views || 0).toLocaleString()}
                  </span>
                  ` : ''}
                  ${event.favorites > 0 ? `
                  <span class="flex items-center">
                    <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path>
                    </svg>
                    ${event.favorites.toLocaleString()}
                  </span>
                  ` : ''}
                </div>
                ` : ''}
              </div>
            </div>
          </div>
        </div>
      `;
      
      return card;
    }
    
    // Update search results count
    function updateSearchResultsCount(start, end, total, isFiltered = false) {
      if (searchResultsCount) {
        let text;
        if (total === 0) {
          text = translations.noEvents;
        } else if (isFiltered && total < allEventsData.length) {
          text = translations.showingResults
            .replace('{start}', start.toString())
            .replace('{end}', end.toString())
            .replace('{total}', total.toString());
        } else {
          const locale = document.documentElement.lang || 'zh';
          text = `${locale === 'zh' ? '显示' : 'Showing'} ${total} ${locale === 'zh' ? '个活动' : 'events'}`;
        }
        searchResultsCount.textContent = text;
      }
      
      // Also update pagination info if it exists
      const paginationInfo = document.querySelector('.hidden.sm\\:flex-1 p');
      if (paginationInfo && total > 0) {
        const showingText = translations.showingResults
          .replace('{start}', start.toString())
          .replace('{end}', Math.min(end, total).toString())
          .replace('{total}', total.toString());
        paginationInfo.textContent = showingText;
      }
    }
    
    // Update clear buttons visibility
    function updateClearButtons() {
      const hasSearch = searchInput?.value?.trim() || '';
      const hasStatusFilter = statusFilter?.value !== 'all';
      const hasCityFilter = cityFilter?.value || '';
      const hasAnyFilter = hasSearch || hasStatusFilter || hasCityFilter;
      
      // Show/hide clear search button
      if (clearSearchBtn) {
        clearSearchBtn.classList.toggle('hidden', !hasSearch);
      }
      
      // Show/hide clear all filters button
      if (clearAllFiltersBtn) {
        clearAllFiltersBtn.classList.toggle('hidden', !hasAnyFilter);
      }
    }
    
    // Update pagination controls
    function updatePaginationControls(current, total) {
      const paginationNav = document.querySelector('nav[aria-label="Pagination"]');
      if (!paginationNav) return;
      
      // Hide pagination if only one page or no results
      const paginationContainer = paginationNav.closest('.flex.items-center.justify-between');
      if (paginationContainer) {
        paginationContainer.style.display = total <= 1 ? 'none' : 'flex';
      }
      
      if (total <= 1) return;
      
      paginationNav.innerHTML = '';
      
      // Previous button
      const prevButton = document.createElement('button');
      prevButton.className = `relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 text-sm font-medium ${current > 1 ? 'bg-white text-gray-500 hover:bg-gray-50 cursor-pointer' : 'bg-gray-100 text-gray-400 cursor-not-allowed'}`;
      prevButton.innerHTML = `
        <span class="sr-only">${translations.previousPage}</span>
        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
        </svg>
      `;
      if (current > 1) {
        prevButton.addEventListener('click', () => goToPage(current - 1));
      }
      paginationNav.appendChild(prevButton);
      
      // Page numbers - show max 5 pages
      const maxPages = 5;
      let startPage = Math.max(1, current - Math.floor(maxPages / 2));
      let endPage = Math.min(total, startPage + maxPages - 1);
      
      // Adjust start page if we're near the end
      if (endPage - startPage + 1 < maxPages) {
        startPage = Math.max(1, endPage - maxPages + 1);
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = `relative inline-flex items-center px-4 py-2 border text-sm font-medium cursor-pointer ${i === current ? 'z-10 bg-blue-50 border-blue-500 text-blue-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'}`;
        pageButton.textContent = i;
        pageButton.addEventListener('click', () => goToPage(i));
        paginationNav.appendChild(pageButton);
      }
      
      // Next button
      const nextButton = document.createElement('button');
      nextButton.className = `relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 text-sm font-medium ${current < total ? 'bg-white text-gray-500 hover:bg-gray-50 cursor-pointer' : 'bg-gray-100 text-gray-400 cursor-not-allowed'}`;
      nextButton.innerHTML = `
        <span class="sr-only">${translations.nextPage}</span>
        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
        </svg>
      `;
      if (current < total) {
        nextButton.addEventListener('click', () => goToPage(current + 1));
      }
      paginationNav.appendChild(nextButton);
    }
    
    // Go to specific page
    function goToPage(page) {
      // Update URL
      const url = new URL(window.location);
      if (page === 1) {
        url.searchParams.delete('page');
      } else {
        url.searchParams.set('page', page.toString());
      }
      window.history.pushState({}, '', url);
      
      // Re-initialize pagination with new page
      initializeClientPagination();
      
      // Scroll to top of events list
      const eventsGrid = document.getElementById('events-grid');
      if (eventsGrid) {
        eventsGrid.scrollIntoView({ behavior: 'smooth' });
      }
    }
    
    // Add event listeners for filters
    if (statusFilter) {
      statusFilter.addEventListener('change', () => {
        // Reset to page 1 when filtering
        const url = new URL(window.location);
        url.searchParams.delete('page');
        window.history.pushState({}, '', url);
        initializeClientPagination();
      });
    }
    
    if (cityFilter) {
      cityFilter.addEventListener('change', () => {
        // Reset to page 1 when filtering
        const url = new URL(window.location);
        url.searchParams.delete('page');
        window.history.pushState({}, '', url);
        initializeClientPagination();
      });
    }
    
    if (searchInput) {
      // Add real-time search functionality (no debounce for better UX)
      searchInput.addEventListener('input', () => {
        // Reset to page 1 when searching
        const url = new URL(window.location);
        url.searchParams.delete('page');
        window.history.pushState({}, '', url);
        initializeClientPagination();
      });
      
      // Handle Enter key
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          initializeClientPagination();
        }
      });
    }
    
    // Clear search button
    if (clearSearchBtn) {
      clearSearchBtn.addEventListener('click', () => {
        if (searchInput) {
          searchInput.value = '';
          searchInput.focus();
          const url = new URL(window.location);
          url.searchParams.delete('page');
          window.history.pushState({}, '', url);
          initializeClientPagination();
        }
      });
    }
    
    // Clear all filters button
    if (clearAllFiltersBtn) {
      clearAllFiltersBtn.addEventListener('click', () => {
        if (searchInput) searchInput.value = '';
        if (statusFilter) statusFilter.value = 'all';
        if (cityFilter) cityFilter.value = '';
        
        const url = new URL(window.location);
        url.searchParams.delete('page');
        window.history.pushState({}, '', url);
        initializeClientPagination();
        
        if (searchInput) searchInput.focus();
      });
    }
    
    // Set initial filter values from URL
    const urlParams = new URLSearchParams(window.location.search);
    if (statusFilter && urlParams.get('status')) {
      statusFilter.value = urlParams.get('status') || 'all';
    }
    if (cityFilter && urlParams.get('city')) {
      cityFilter.value = urlParams.get('city') || '';
    }
    
    // Initialize client-side pagination
    initializeClientPagination();
    
    // Performance monitoring
    if (typeof window !== 'undefined' && 'performance' in window) {
      window.addEventListener('load', function() {
        setTimeout(() => {
          try {
            const perfData = performance.getEntriesByType('navigation')[0];
            if (perfData && perfData.loadEventEnd > 0) {
              console.log(`Events page loaded in ${Math.round(perfData.loadEventEnd)} ms`);
            }
          } catch (e) {
            // Ignore performance monitoring errors
          }
        }, 100);
      });
    }
  });
</script>

<!-- Pass events data to the search script -->
<script define:vars={{ allEvents }}>
  // Make events data available to the search script
  if (typeof window !== 'undefined') {
    window.allEventsData = allEvents || [];
  }
</script>

<style>
  /* Ensure consistent card heights */
  #events-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    grid-auto-rows: 1fr;
  }
  
  @media (min-width: 768px) {
    #events-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1024px) {
    #events-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  /* Line clamp for consistent text heights */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.5;
    max-height: 3em; /* 2 lines * 1.5 line-height */
  }
  
  /* Ensure aspect ratio for images */
  .aspect-video {
    aspect-ratio: 16 / 9;
  }
  
  /* Performance optimizations */
  .group {
    will-change: transform;
  }
  
  .group:hover {
    transform: translateZ(0);
  }
  
  /* Lazy loading placeholder */
  .lazy-load {
    opacity: 0.7;
    transition: opacity 0.3s ease;
  }
  
  .lazy-load img {
    filter: blur(2px);
    transition: filter 0.3s ease;
  }
  
  .lazy-load:not(.lazy-load) img {
    filter: none;
  }
</style>