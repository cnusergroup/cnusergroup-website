---
/**
 * Events List Component
 * Displays a list of events with filtering and pagination
 */

import type { ProcessedEvent } from '../../utils/eventProcessing.js';
import EventCard from '../ui/EventCard.astro';

export interface Props {
  events: ProcessedEvent[];
  locale?: 'zh' | 'en';
  showEngagement?: boolean;
  showFilters?: boolean;
  showPagination?: boolean;
  eventsPerPage?: number;
  currentPage?: number;
  totalEvents?: number;
  totalPages?: number;
  allEvents?: ProcessedEvent[]; // For statistics calculation
  title?: string;
  description?: string;
  className?: string;
}

const {
  events = [],
  locale = 'zh',
  showEngagement = true,
  showFilters = true,
  showPagination = true,
  eventsPerPage = 12,
  currentPage = 1,
  totalEvents,
  totalPages,
  allEvents,
  title,
  description,
  className = ''
} = Astro.props;

// Use provided pagination data
const actualTotalEvents = totalEvents ?? events.length;
const actualTotalPages = totalPages ?? Math.ceil(actualTotalEvents / eventsPerPage);
const startIndex = (currentPage - 1) * eventsPerPage;
const endIndex = Math.min(startIndex + eventsPerPage, actualTotalEvents);
const paginatedEvents = events;

// Tags are no longer used for filtering

// For statistics, we need to use all events, not just paginated ones
const allEventsForStats = allEvents || events;
const upcomingEvents = allEventsForStats.filter(event => event.status === 'upcoming');
const pastEvents = allEventsForStats.filter(event => event.status === 'ended');

// Get unique cities for filtering (only show cities with events)
const cityCounts = allEventsForStats.reduce((acc, event) => {
  event.cityMappings.forEach(cityId => {
    acc[cityId] = (acc[cityId] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// City name mappings based on locale
const cityNames: Record<string, Record<string, string>> = {
  zh: {
    'beijing': '北京',
    'shanghai': '上海', 
    'shenzhen': '深圳',
    'guangzhou': '广州',
    'chengdu': '成都',
    'hangzhou': '杭州',
    'wuhan': '武汉',
    'xian': '西安',
    'hefei': '合肥',
    'fuzhou': '福州',
    'suzhou': '苏州',
    'lanzhou': '兰州',
    'changji': '昌吉',
    'hechi': '河池',
    'urumqi': '乌鲁木齐',
    'qingdao': '青岛',
    'xiamen': '厦门',
    'zhangjiakou': '张家口'
  },
  en: {
    'beijing': 'Beijing',
    'shanghai': 'Shanghai', 
    'shenzhen': 'Shenzhen',
    'guangzhou': 'Guangzhou',
    'chengdu': 'Chengdu',
    'hangzhou': 'Hangzhou',
    'wuhan': 'Wuhan',
    'xian': 'Xi\'an',
    'hefei': 'Hefei',
    'fuzhou': 'Fuzhou',
    'suzhou': 'Suzhou',
    'lanzhou': 'Lanzhou',
    'changji': 'Changji',
    'hechi': 'Hechi',
    'urumqi': 'Urumqi',
    'qingdao': 'Qingdao',
    'xiamen': 'Xiamen',
    'zhangjiakou': 'Zhangjiakou'
  }
};

const allCities = Object.entries(cityCounts)
  .filter(([, count]) => count > 0)
  .sort(([, a], [, b]) => b - a)
  .map(([cityId]) => ({ 
    id: cityId, 
    name: cityNames[locale]?.[cityId] || cityId 
  }));

// Load translations
const translationsModule = locale === 'zh' 
  ? await import('../../data/translations/zh.json')
  : await import('../../data/translations/en.json');
const translations = translationsModule.default;
const t = translations.events;

// Format pagination text
function formatPaginationText(start: number, end: number, total: number): string {
  return t.showingResults
    .replace('{start}', start.toString())
    .replace('{end}', Math.min(end, total).toString())
    .replace('{total}', total.toString());
}

// Generate pagination URL with preserved query parameters
function generatePaginationUrl(pageNum: number): string {
  const url = new URL(Astro.request.url);
  const params = new URLSearchParams(url.search);
  
  if (pageNum === 1) {
    params.delete('page');
  } else {
    params.set('page', pageNum.toString());
  }
  
  const queryString = params.toString();
  // Use import.meta.env.BASE_URL to get the correct base path
  const basePath = import.meta.env.BASE_URL || '/';
  const eventsPath = basePath === '/' ? '/events' : `${basePath.replace(/\/$/, '')}/events`;
  return `${eventsPath}${queryString ? '?' + queryString : ''}`;
}
---

<div class={`events-list ${className}`}>
  <!-- Header -->
  {(title || description) && (
    <div class="mb-8">
      {title && (
        <h2 class="text-3xl font-bold text-gray-900 mb-4">{title}</h2>
      )}
      {description && (
        <p class="text-lg text-gray-600">{description}</p>
      )}
    </div>
  )}

  <!-- Statistics -->
  {actualTotalEvents > 0 && (
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
      <div class="bg-blue-50 rounded-lg p-4">
        <div class="text-2xl font-bold text-blue-600">{actualTotalEvents}</div>
        <div class="text-sm text-blue-800">{t.allEvents}</div>
      </div>
      <div class="bg-green-50 rounded-lg p-4">
        <div class="text-2xl font-bold text-green-600">{upcomingEvents.length}</div>
        <div class="text-sm text-green-800">{t.upcomingEvents}</div>
      </div>
      <div class="bg-gray-50 rounded-lg p-4">
        <div class="text-2xl font-bold text-gray-600">{pastEvents.length}</div>
        <div class="text-sm text-gray-800">{t.pastEvents}</div>
      </div>
    </div>
  )}

  <!-- Search and Filters (Integrated) -->
  {showFilters && actualTotalEvents > 0 && (
    <div class="mb-8 p-6 bg-gray-50 rounded-lg">
      <!-- Search Input -->
      <div class="mb-4">
        <div class="relative">
          <input
            type="text"
            id="event-search"
            placeholder={t.searchPlaceholder}
            class="w-full px-4 py-3 pl-12 pr-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Filter Options -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Event Status Filter -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            {t.filters.status}
          </label>
          <select 
            id="statusFilter" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">{t.allEvents}</option>
            <option value="upcoming">{t.upcomingEvents}</option>
            <option value="past">{t.pastEvents}</option>
          </select>
        </div>

        <!-- City Filter -->
        {allCities.length > 0 && (
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              {t.filters.city}
            </label>
            <select 
              id="cityFilter" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">{t.filters.allCities}</option>
              {allCities.map(city => (
                <option value={city.id}>{city.name}</option>
              ))}
            </select>
          </div>
        )}
      </div>
      
      <!-- Results Summary and Clear Button -->
      <div class="mt-4 flex items-center justify-between text-sm text-gray-600">
        <span id="results-count">
          {locale === 'zh' ? '显示所有活动' : 'Showing all events'}
        </span>
        <button
          id="clear-filters"
          class="text-blue-600 hover:text-blue-800 transition-colors duration-200 hidden"
        >
          {locale === 'zh' ? '清除筛选' : 'Clear Filters'}
        </button>
      </div>
    </div>
  )}

  <!-- Search Results Summary -->
  <div class="mb-4 flex items-center justify-between">
    <div id="searchResultsCount" class="text-sm text-gray-600">
      {showPagination && actualTotalEvents > eventsPerPage 
        ? formatPaginationText(startIndex + 1, endIndex, actualTotalEvents)
        : `${locale === 'zh' ? '显示' : 'Showing'} ${actualTotalEvents} ${locale === 'zh' ? '个活动' : 'events'}`
      }
    </div>
    <button
      type="button"
      id="clearAllFilters"
      class="text-blue-600 hover:text-blue-800 text-sm font-medium hidden"
    >
      {locale === 'zh' ? '清除所有筛选' : 'Clear All Filters'}
    </button>
  </div>

  <!-- Events Grid -->
  {paginatedEvents.length > 0 ? (
    <div>

      <!-- Events Grid -->
      <div class="mb-8" id="events-grid">
        {paginatedEvents.map((event, index) => (
          <EventCard 
            event={event} 
            locale={locale} 
            showEngagement={showEngagement}
            className=""
          />
        ))}
      </div>

      <!-- Pagination -->
      {showPagination && actualTotalPages > 1 && (
        <div class="flex items-center justify-between">
          <div class="flex-1 flex justify-between sm:hidden">
            <!-- Mobile pagination -->
            {currentPage > 1 && (
              <a
                href={generatePaginationUrl(currentPage - 1)}
                class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                {t.previousPage}
              </a>
            )}
            {currentPage < actualTotalPages && (
              <a
                href={generatePaginationUrl(currentPage + 1)}
                class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
              >
                {t.nextPage}
              </a>
            )}
          </div>
          
          <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p class="text-sm text-gray-700">
                {formatPaginationText(
                  startIndex + 1, 
                  endIndex, 
                  actualTotalEvents
                )}
              </p>
            </div>
            <div>
              <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <!-- Previous button -->
                {currentPage > 1 ? (
                  <a
                    href={generatePaginationUrl(currentPage - 1)}
                    class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    <span class="sr-only">{t.previousPage}</span>
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </a>
                ) : (
                  <span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </span>
                )}

                <!-- Page numbers -->
                {Array.from({ length: Math.min(actualTotalPages, 5) }, (_, i) => {
                  const startPage = Math.max(1, currentPage - 2);
                  const pageNum = startPage + i;
                  
                  if (pageNum > actualTotalPages) return null;
                  
                  const isCurrentPage = pageNum === currentPage;
                  
                  return (
                    <a
                      href={generatePaginationUrl(pageNum)}
                      class={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                        isCurrentPage
                          ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                          : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      {pageNum}
                    </a>
                  );
                }).filter(Boolean)}

                <!-- Next button -->
                {currentPage < actualTotalPages ? (
                  <a
                    href={generatePaginationUrl(currentPage + 1)}
                    class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                  >
                    <span class="sr-only">{t.nextPage}</span>
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                  </a>
                ) : (
                  <span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                  </span>
                )}
              </nav>
            </div>
          </div>
        </div>
      )}
    </div>
  ) : (
    <!-- No Events Message -->
    <div class="text-center py-12">
      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900">{t.noEvents}</h3>
      <p class="mt-1 text-sm text-gray-500">{t.noEventsDesc}</p>
    </div>
  )}
</div>

<script is:inline>
  /* Pure Frontend Pagination and Filtering for Static Deployment */
  function initEventSearch() {
    console.log('Initializing event search...');
    
    const searchInput = document.getElementById('event-search');
    const statusFilter = document.getElementById('statusFilter');
    const cityFilter = document.getElementById('cityFilter');
    const clearFiltersBtn = document.getElementById('clear-filters');
    const clearAllFiltersBtn = document.getElementById('clearAllFilters');
    const resultsCount = document.getElementById('results-count');
    const searchResultsCount = document.getElementById('searchResultsCount');
    const eventsGrid = document.getElementById('events-grid');
    
    /* Get all event cards and extract data */
    const allEventCards = Array.from(document.querySelectorAll('[data-event-id]'));
    const eventsPerPage = 12;
    let currentPage = 1;
    let filteredEvents = [];
    
    console.log('Found event cards:', allEventCards.length);
    
    if (allEventCards.length === 0) {
      console.warn('No event cards found for search functionality');
      setTimeout(initEventSearch, 500); /* Retry after 500ms */
      return;
    }

    /* Extract event data from DOM */
    const allEventsData = allEventCards.map(function(card) {
      const eventData = {
        element: card,
        id: card.dataset.eventId || '',
        title: (card.dataset.eventTitle || '').toLowerCase(),
        location: (card.dataset.eventLocation || '').toLowerCase(),
        status: card.dataset.eventStatus || 'ended',
        cities: (card.dataset.eventCities || '').toLowerCase(),
        tags: (card.dataset.eventTags || '').toLowerCase(),
        time: (card.dataset.eventTime || '').toLowerCase(),
        formattedDate: (card.dataset.eventFormattedDate || '').toLowerCase(),
        originalIndex: allEventCards.indexOf(card)
      };
      console.log('Event data:', eventData.title, eventData.status, eventData.cities);
      return eventData;
    });

    /* Set initial filter values from URL */
    const urlParams = new URLSearchParams(window.location.search);
    const searchQuery = urlParams.get('q') || '';
    const status = urlParams.get('status') || 'all';
    const city = urlParams.get('city') || '';
    const pageFromUrl = parseInt(urlParams.get('page') || '1');

    if (searchInput && searchQuery) {
      searchInput.value = searchQuery;
    }
    if (statusFilter) {
      statusFilter.value = status;
    }
    if (cityFilter && city) {
      cityFilter.value = city;
    }

    function filterEvents() {
      const searchTerm = searchInput?.value.toLowerCase().trim() || '';
      const statusValue = statusFilter?.value || 'all';
      const cityValue = cityFilter?.value || '';

      console.log('Filtering with:', { searchTerm, statusValue, cityValue });

      filteredEvents = allEventsData.filter(function(event) {
        /* Search matching */
        let matchesSearch = true;
        if (searchTerm) {
          const searchFields = [
            event.title,
            event.location,
            event.cities,
            event.tags,
            event.time,
            event.formattedDate
          ];
          
          const searchText = searchFields.join(' ');
          const searchTerms = searchTerm.split(/\s+/).filter(function(term) { return term.length > 0; });
          matchesSearch = searchTerms.every(function(term) { return searchText.includes(term); });
        }

        /* Status matching */
        let matchesStatus = true;
        if (statusValue !== 'all') {
          if (statusValue === 'upcoming') {
            matchesStatus = event.status === 'upcoming';
          } else if (statusValue === 'past') {
            matchesStatus = event.status === 'ended';
          }
        }

        /* City matching */
        let matchesCity = true;
        if (cityValue) {
          matchesCity = event.cities.includes(cityValue.toLowerCase());
        }

        return matchesSearch && matchesStatus && matchesCity;
      });

      /* Reset to page 1 when filtering changes */
      const hasFilters = searchTerm || statusValue !== 'all' || cityValue;
      if (hasFilters) {
        currentPage = 1;
      } else {
        currentPage = pageFromUrl;
      }

      updateDisplay();
      updateURL();
    }

    function updateDisplay() {
      /* Calculate pagination */
      const totalPages = Math.ceil(filteredEvents.length / eventsPerPage);
      const startIndex = (currentPage - 1) * eventsPerPage;
      const endIndex = startIndex + eventsPerPage;
      const currentPageEvents = filteredEvents.slice(startIndex, endIndex);

      /* Hide all cards first */
      allEventCards.forEach(function(card) {
        card.style.display = 'none';
      });

      /* Show only current page events */
      currentPageEvents.forEach(function(event) {
        event.element.style.display = 'block';
      });

      /* Update results count */
      updateResultsCount(filteredEvents.length, startIndex + 1, Math.min(endIndex, filteredEvents.length));
      
      /* Update clear buttons */
      updateClearButtons();
      
      /* Update pagination */
      updatePagination(totalPages);
    }

    function updateResultsCount(total, start, end) {
      const lang = document.documentElement.lang || 'zh';
      
      let text;
      if (total === 0) {
        text = lang === 'zh' ? '未找到匹配的活动' : 'No events found';
      } else if (total <= eventsPerPage) {
        text = lang === 'zh' 
          ? '显示 ' + total + ' 个活动' 
          : 'Showing ' + total + ' events';
      } else {
        text = lang === 'zh' 
          ? '显示第 ' + start + ' - ' + end + ' 项，共 ' + total + ' 项结果'
          : 'Showing ' + start + ' - ' + end + ' of ' + total + ' events';
      }
      
      if (resultsCount) {
        resultsCount.textContent = text;
      }
      if (searchResultsCount) {
        searchResultsCount.textContent = text;
      }
    }

    function updateClearButtons() {
      const searchTerm = searchInput?.value.toLowerCase().trim() || '';
      const statusValue = statusFilter?.value || 'all';
      const cityValue = cityFilter?.value || '';
      const hasFilters = searchTerm || statusValue !== 'all' || cityValue;
      
      if (clearFiltersBtn) {
        clearFiltersBtn.classList.toggle('hidden', !hasFilters);
      }
      if (clearAllFiltersBtn) {
        clearAllFiltersBtn.classList.toggle('hidden', !hasFilters);
      }
    }

    function updatePagination(totalPages) {
      const paginationContainer = document.querySelector('.flex.items-center.justify-between');
      const paginationNav = document.querySelector('nav[aria-label="Pagination"]');
      
      if (!paginationContainer || !paginationNav) return;

      if (totalPages <= 1) {
        paginationContainer.style.display = 'none';
        return;
      }

      paginationContainer.style.display = 'flex';
      
      // Update pagination info text
      const paginationInfo = paginationContainer.querySelector('p');
      if (paginationInfo) {
        const start = (currentPage - 1) * eventsPerPage + 1;
        const end = Math.min(currentPage * eventsPerPage, filteredEvents.length);
        const lang = document.documentElement.lang || 'zh';
        const text = lang === 'zh' 
          ? '显示第 ' + start + ' - ' + end + ' 项，共 ' + filteredEvents.length + ' 项结果'
          : 'Showing ' + start + ' - ' + end + ' of ' + filteredEvents.length + ' results';
        paginationInfo.textContent = text;
      }

      // Rebuild pagination buttons
      paginationNav.innerHTML = '';

      // Previous button
      const prevButton = document.createElement('button');
      prevButton.className = 'relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 text-sm font-medium ' + 
        (currentPage > 1 ? 'bg-white text-gray-500 hover:bg-gray-50 cursor-pointer' : 'bg-gray-100 text-gray-400 cursor-not-allowed');
      prevButton.innerHTML = '<span class="sr-only">Previous</span><svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" /></svg>';
      
      if (currentPage > 1) {
        prevButton.addEventListener('click', function() {
          currentPage--;
          updateDisplay();
        });
      }
      paginationNav.appendChild(prevButton);

      // Page numbers (show max 5 pages)
      const maxPages = 5;
      let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));
      let endPage = Math.min(totalPages, startPage + maxPages - 1);
      
      if (endPage - startPage + 1 < maxPages) {
        startPage = Math.max(1, endPage - maxPages + 1);
      }

      for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = 'relative inline-flex items-center px-4 py-2 border text-sm font-medium cursor-pointer ' +
          (i === currentPage 
            ? 'z-10 bg-blue-50 border-blue-500 text-blue-600' 
            : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50');
        pageButton.textContent = i;
        pageButton.addEventListener('click', function() {
          currentPage = i;
          updateDisplay();
        });
        paginationNav.appendChild(pageButton);
      }

      // Next button
      const nextButton = document.createElement('button');
      nextButton.className = 'relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 text-sm font-medium ' +
        (currentPage < totalPages ? 'bg-white text-gray-500 hover:bg-gray-50 cursor-pointer' : 'bg-gray-100 text-gray-400 cursor-not-allowed');
      nextButton.innerHTML = '<span class="sr-only">Next</span><svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" /></svg>';
      
      if (currentPage < totalPages) {
        nextButton.addEventListener('click', function() {
          currentPage++;
          updateDisplay();
        });
      }
      paginationNav.appendChild(nextButton);
    }

    function updateURL() {
      const searchTerm = searchInput?.value.trim() || '';
      const statusValue = statusFilter?.value || 'all';
      const cityValue = cityFilter?.value || '';
      
      const params = new URLSearchParams();
      
      if (searchTerm) params.set('q', searchTerm);
      if (statusValue !== 'all') params.set('status', statusValue);
      if (cityValue) params.set('city', cityValue);
      if (currentPage > 1) params.set('page', currentPage.toString());
      
      const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
      window.history.replaceState({}, '', newUrl);
    }

    function clearFilters() {
      if (searchInput) searchInput.value = '';
      if (statusFilter) statusFilter.value = 'all';
      if (cityFilter) cityFilter.value = '';
      currentPage = 1;
      
      filterEvents();
    }

    /* Bind event listeners */
    if (searchInput) {
      searchInput.addEventListener('input', filterEvents);
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          filterEvents();
        }
      });
    }

    if (statusFilter) {
      statusFilter.addEventListener('change', filterEvents);
    }

    if (cityFilter) {
      cityFilter.addEventListener('change', filterEvents);
    }

    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', clearFilters);
    }
    
    if (clearAllFiltersBtn) {
      clearAllFiltersBtn.addEventListener('click', clearFilters);
    }

    /* Initial setup */
    filterEvents();
    
    console.log('Pure frontend event search initialized with', allEventsData.length, 'events');
  }

  /* Multiple initialization strategies for GitHub Pages compatibility */
  let initAttempts = 0;
  const maxAttempts = 5;
  
  function tryInitialize() {
    initAttempts++;
    console.log('Initialization attempt:', initAttempts);
    
    /* Check if we have event cards */
    const eventCards = document.querySelectorAll('[data-event-id]');
    console.log('Event cards found:', eventCards.length);
    
    if (eventCards.length > 0) {
      console.log('Event cards found, initializing search...');
      initEventSearch();
      return true;
    } else if (initAttempts < maxAttempts) {
      console.log('No event cards found, retrying in 500ms...');
      setTimeout(tryInitialize, 500);
      return false;
    } else {
      console.warn('Max initialization attempts reached, no event cards found');
      return false;
    }
  }

  /* Strategy 1: DOM ready */
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM ready, trying to initialize...');
      tryInitialize();
    });
  } else {
    console.log('DOM already ready, trying to initialize...');
    tryInitialize();
  }

  /* Strategy 2: Window load (backup) */
  window.addEventListener('load', function() {
    console.log('Window loaded, trying backup initialization...');
    setTimeout(function() {
      const eventCards = document.querySelectorAll('[data-event-id]');
      if (eventCards.length > 0 && typeof initEventSearch === 'function') {
        console.log('Backup initialization with', eventCards.length, 'event cards');
        initEventSearch();
      }
    }, 100);
  });

  /* Strategy 3: Delayed initialization for GitHub Pages */
  setTimeout(function() {
    const eventCards = document.querySelectorAll('[data-event-id]');
    if (eventCards.length > 0) {
      console.log('Delayed initialization with', eventCards.length, 'event cards');
      if (typeof initEventSearch === 'function') {
        initEventSearch();
      }
    }
  }, 2000);
</script>



<style>
  /* Ensure consistent card heights */
  #events-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    grid-auto-rows: 1fr;
  }
  
  @media (min-width: 768px) {
    #events-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (min-width: 1024px) {
    #events-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  /* Line clamp for consistent text heights */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.5;
    max-height: 3em; /* 2 lines * 1.5 line-height */
  }
  
  /* Ensure aspect ratio for images */
  .aspect-video {
    aspect-ratio: 16 / 9;
  }
  
  /* Performance optimizations */
  .group {
    will-change: transform;
  }
  
  .group:hover {
    transform: translateZ(0);
  }
  
  /* Lazy loading placeholder - removed opacity effect to ensure consistent appearance */
  .lazy-load img {
    filter: blur(2px);
    transition: filter 0.3s ease;
  }
  
  .lazy-load:not(.lazy-load) img {
    filter: none;
  }
</style>