---
/**
 * 增强的图片组件
 * 包含错误处理、懒加载、占位符和响应式支持
 */

import { 
  getFallbackImage, 
  generateAltText, 
} from '../../utils/imageErrorHandling';

import {
  getOptimizedImageUrl,
  generateSrcSet
} from '../../utils/imageOptimization';

export interface Props {
  src: string;
  alt?: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  fallback?: string;
  cityName?: string;
  lang?: 'zh' | 'en';
  responsive?: boolean;
  widths?: number[];
  format?: 'webp' | 'avif' | 'png' | 'jpg';
  quality?: number;
  placeholder?: boolean;
  placeholderColor?: string;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  fallback,
  cityName,
  lang = 'zh',
  responsive = true,
  widths = [320, 640, 768, 1024, 1280],
  format = 'webp',
  quality = 80,
  placeholder = true,
  placeholderColor = '#f3f4f6'
} = Astro.props;

// 生成alt文本
const altText = alt || generateAltText(src, cityName, lang);

// 获取备用图片
const fallbackSrc = fallback || getFallbackImage(src);

// 生成优化的图片源
const optimizedSrc = getOptimizedImageUrl(src, { width, format, quality });

// 生成响应式源集
const srcSet = responsive ? generateSrcSet(src, widths) : undefined;

// 生成sizes属性
const sizes = responsive 
  ? '(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw'
  : undefined;

// 生成唯一ID用于占位符
const placeholderId = `placeholder-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`enhanced-image-container ${className}`} data-image-container>
  {placeholder && (
    <div 
      class="image-placeholder" 
      id={placeholderId}
      style={`background-color: ${placeholderColor}; aspect-ratio: ${width && height ? `${width}/${height}` : 'auto'};`}
    >
      <div class="placeholder-content">
        <svg class="placeholder-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
          <circle cx="8.5" cy="8.5" r="1.5"/>
          <polyline points="21,15 16,10 5,21"/>
        </svg>
      </div>
    </div>
  )}
  
  <img
    src={optimizedSrc}
    srcset={srcSet}
    sizes={sizes}
    alt={altText}
    width={width}
    height={height}
    loading={loading}
    class="enhanced-image"
    data-fallback={fallbackSrc}
    data-original-src={src}
    data-city-name={cityName}
    data-lang={lang}
    onload="this.parentElement.querySelector('.image-placeholder')?.remove(); this.classList.add('loaded'); window.imageLoadSuccess?.(this)"
    onerror="window.handleImageError?.(event)"
  />
</div>

<style>
  .enhanced-image-container {
    position: relative;
    display: block;
    overflow: hidden;
    width: 100%;
  }
  
  .image-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f3f4f6;
    border-radius: inherit;
    z-index: 1;
  }
  
  .placeholder-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #9ca3af;
  }
  
  .placeholder-icon {
    width: 2rem;
    height: 2rem;
    opacity: 0.5;
  }
  
  .enhanced-image {
    display: block;
    width: 100%;
    height: auto;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    position: relative;
    z-index: 2;
  }
  
  .enhanced-image.loaded {
    opacity: 1;
  }
  
  .enhanced-image.error {
    opacity: 0.7;
    filter: grayscale(0.3);
  }
  
  /* 骨架屏动画 */
  .image-placeholder::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.4),
      transparent
    );
    animation: shimmer 1.5s infinite;
  }
  
  @keyframes shimmer {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }
  
  /* 响应式设计 */
  @media (max-width: 640px) {
    .placeholder-icon {
      width: 1.5rem;
      height: 1.5rem;
    }
  }
  
  /* 减少动画偏好 */
  @media (prefers-reduced-motion: reduce) {
    .enhanced-image {
      transition: none;
    }
    
    .image-placeholder::before {
      animation: none;
    }
  }
  
  /* 高对比度模式 */
  @media (prefers-contrast: high) {
    .image-placeholder {
      border: 2px solid currentColor;
    }
  }
</style>

<script>
  // 图片错误处理函数
  function handleImageError(event: Event) {
    const img = event.target as HTMLImageElement;
    if (!img) return;
    
    // 避免无限循环
    if (img.dataset.fallbackAttempted === 'true') {
      console.warn('Fallback image also failed to load:', img.src);
      img.classList.add('error');
      return;
    }
    
    const fallbackSrc = img.dataset.fallback;
    if (fallbackSrc) {
      img.dataset.fallbackAttempted = 'true';
      img.src = fallbackSrc;
      console.warn(`Image failed to load: ${img.dataset.originalSrc}, using fallback: ${fallbackSrc}`);
    } else {
      img.classList.add('error');
    }
  }
  
  // 懒加载观察器
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const container = entry.target as HTMLElement;
          const img = container.querySelector('.enhanced-image') as HTMLImageElement;
          
          if (img && img.dataset.src) {
            img.src = img.dataset.src;
            img.removeAttribute('data-src');
            imageObserver.unobserve(container);
          }
        }
      });
    }, {
      root: null,
      rootMargin: '50px',
      threshold: 0.1
    });
    
    // 观察所有图片容器
    document.querySelectorAll('[data-image-container]').forEach(container => {
      imageObserver.observe(container);
    });
  }
  
  // 全局错误处理
  window.handleImageError = handleImageError;
</script>