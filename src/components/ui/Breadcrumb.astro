---
import { generateBreadcrumbs } from '../../utils';
import type { Language } from '../../types';

interface Props {
  currentPath: string;
  lang: Language;
  class?: string;
}

const { currentPath, lang, class: className = '' } = Astro.props;
const breadcrumbs = generateBreadcrumbs(currentPath, lang);
---

<nav class={`breadcrumb ${className}`} aria-label="Breadcrumb">
  <ol class="flex items-center space-x-1 text-sm">
    {breadcrumbs.map((crumb, index) => (
      <li class="flex items-center">
        {index > 0 && (
          <svg class="w-3 h-3 text-gray-400 mx-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        )}
        {index === breadcrumbs.length - 1 ? (
          <span class="text-gray-600 font-medium" aria-current="page">
            {crumb.label}
          </span>
        ) : (
          <a 
            href={crumb.path}
            class="text-aws-orange hover:text-orange-600 transition-colors duration-200 font-medium hover:underline"
          >
            {crumb.label}
          </a>
        )}
      </li>
    ))}
  </ol>
</nav>

<style>
  .breadcrumb {
    padding: 0.75rem 0;
    background: transparent;
  }
  
  .breadcrumb ol {
    align-items: baseline;
    justify-content: flex-start;
  }
  
  .breadcrumb li {
    display: flex;
    align-items: baseline;
  }
  
  .breadcrumb a,
  .breadcrumb span[aria-current="page"] {
    display: inline-block;
    line-height: 1.5;
    font-weight: 500;
    font-size: inherit;
  }
  
  .breadcrumb a {
    text-decoration: none;
  }
  
  .breadcrumb a:hover {
    text-decoration: underline;
  }
  
  .breadcrumb span[aria-current="page"] {
    color: #6b7280;
  }
  
  @media (max-width: 640px) {
    .breadcrumb {
      padding: 0.5rem 0;
    }
    
    .breadcrumb ol {
      font-size: 0.875rem;
    }
    
    .breadcrumb svg {
      width: 0.75rem;
      height: 0.75rem;
      margin: 0 0.375rem;
    }
  }
</style>