---
// 性能监控组件
---

<script>
  // 性能监控功能
  class PerformanceMonitor {
    constructor() {
      this.initPerformanceObserver();
      this.trackPageLoad();
    }

    initPerformanceObserver() {
      if ('PerformanceObserver' in window) {
        // 监控资源加载性能
        const resourceObserver = new PerformanceObserver((list) => {
          list.getEntries().forEach((entry) => {
            if (entry.initiatorType === 'img') {
              const loadTime = (entry.responseEnd || 0) - entry.startTime;
              if (loadTime > 2000) {
                console.warn(`慢加载图片: ${entry.name} (${loadTime.toFixed(2)}ms)`);
              }
              
              // 发送性能数据
              document.dispatchEvent(new CustomEvent('imagePerformance', {
                detail: {
                  url: entry.name,
                  loadTime: loadTime,
                  size: (entry as any).transferSize || 0
                }
              }));
            }
          });
        });

        resourceObserver.observe({ entryTypes: ['resource'] });

        // 监控长任务
        if ('PerformanceObserver' in window) {
          try {
            const longTaskObserver = new PerformanceObserver((list) => {
              list.getEntries().forEach((entry) => {
                console.warn(`长任务检测: ${entry.duration.toFixed(2)}ms`);
              });
            });
            longTaskObserver.observe({ entryTypes: ['longtask'] });
          } catch (e) {
            // longtask 可能不被支持
          }
        }
      }
    }

    trackPageLoad() {
      window.addEventListener('load', () => {
        // 获取页面加载性能指标
        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;
        
        if (navigation) {
          const metrics = {
            dns: navigation.domainLookupEnd - navigation.domainLookupStart,
            tcp: navigation.connectEnd - navigation.connectStart,
            request: navigation.responseStart - navigation.requestStart,
            response: navigation.responseEnd - navigation.responseStart,
            dom: navigation.domContentLoadedEventEnd - navigation.responseEnd,
            load: navigation.loadEventEnd - navigation.loadEventStart,
            total: navigation.loadEventEnd - (navigation as any).navigationStart
          };

          console.group('页面加载性能');
          console.log('DNS查询:', metrics.dns.toFixed(2) + 'ms');
          console.log('TCP连接:', metrics.tcp.toFixed(2) + 'ms');
          console.log('请求时间:', metrics.request.toFixed(2) + 'ms');
          console.log('响应时间:', metrics.response.toFixed(2) + 'ms');
          console.log('DOM解析:', metrics.dom.toFixed(2) + 'ms');
          console.log('资源加载:', metrics.load.toFixed(2) + 'ms');
          console.log('总加载时间:', metrics.total.toFixed(2) + 'ms');
          console.groupEnd();

          // 发送性能数据到分析服务
          this.sendPerformanceData(metrics);
        }
      });
    }

    sendPerformanceData(metrics: any) {
      // 这里可以发送到分析服务
      if (typeof gtag !== 'undefined') {
        gtag('event', 'page_load_performance', {
          custom_parameter_1: Math.round(metrics.total),
          custom_parameter_2: Math.round(metrics.dom),
          custom_parameter_3: Math.round(metrics.load)
        });
      }
    }
  }

  // 初始化性能监控
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PerformanceMonitor();
    });
  } else {
    new PerformanceMonitor();
  }
</script>