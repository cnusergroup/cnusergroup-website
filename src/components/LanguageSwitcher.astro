---
import { getLanguageFromUrl, getLanguageSwitchUrl, getSupportedLanguages, getLanguageDisplayName } from '@/utils';
import type { Language } from '@/types';

interface Props {
  class?: string;
  showFlags?: boolean;
}

const { class: className = '', showFlags = true } = Astro.props;
const currentLang = getLanguageFromUrl(Astro.url);
const currentUrl = Astro.url.pathname;
const supportedLanguages = getSupportedLanguages();

const languageFlags: Record<Language, string> = {
  zh: 'üá®üá≥',
  en: 'üá∫üá∏'
};
---

<div class={`language-switcher ${className}`}>
  {supportedLanguages.map((lang) => {
    const isActive = lang === currentLang;
    const switchUrl = getLanguageSwitchUrl(currentUrl, lang);
    
    return (
      <a
        href={switchUrl}
        class={`language-option ${isActive ? 'active' : ''}`}
        aria-label={`Switch to ${getLanguageDisplayName(lang)}`}
        data-lang={lang}
      >
        {showFlags && (
          <span class="flag" aria-hidden="true">
            {languageFlags[lang]}
          </span>
        )}
        <span class="label">
          {getLanguageDisplayName(lang)}
        </span>
      </a>
    );
  })}
</div>

<style>
  .language-switcher {
    display: flex;
    gap: 0.5rem;
  }
  
  .language-option {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    color: #6b7280;
    transition: all 0.2s ease;
    border: 1px solid #e5e7eb;
  }
  
  .language-option:hover {
    color: #ff9900;
    border-color: #ff9900;
    background-color: #fff7ed;
  }
  
  .language-option.active {
    color: #ff9900;
    border-color: #ff9900;
    background-color: #fff7ed;
  }
  
  .flag {
    font-size: 1rem;
  }
  
  .label {
    white-space: nowrap;
  }
</style>

<script>
  // ÂÆ¢Êà∑Á´ØËØ≠Ë®ÄÂàáÊç¢Â§ÑÁêÜ
  document.addEventListener('DOMContentLoaded', () => {
    const languageOptions = document.querySelectorAll('.language-option');
    
    languageOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLAnchorElement;
        const lang = target.dataset.lang;
        
        if (lang) {
          // Â≠òÂÇ®ËØ≠Ë®ÄÂÅèÂ•Ω
          localStorage.setItem('preferred-language', lang);
          
          // ËÆæÁΩÆ cookie
          document.cookie = `preferred-language=${lang}; path=/; max-age=${60 * 60 * 24 * 365}; samesite=lax`;
        }
      });
    });
  });
</script>